networks:
  monitoring:
    driver: bridge
    name: monitoring

volumes:
  tempo-data:
  loki-data:
  prometheus_data:
  grafana-data:
  alertmanager_data:

services:
  # Python client that send requests to api server continously
  client:
    build:
      context: ../../client/
    container_name: fraud-detection-client
    environment:
      # - API_URL=https://fraud.cloud.phuchoang.sbs/predict
      - API_URL=http://api:8000/predict
    networks:
      - monitoring
    depends_on:
      - api
    restart: on-failure

  # fast api server
  api:
    build:
      context: ../../
    container_name: fraud-detection-api
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4317/v1/traces
      - OTEL_SERVICE_NAME=fraud-detection-api
    ports:
      - "8000:8000" # FastAPI application
      - "8010:8010" # Prometheus metrics
    networks:
      - monitoring
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # collect metrics, logs, and traces data from OTLP endpoint, container and host
  alloy:
    image: grafana/alloy:v1.8.2
    container_name: alloy
    ports:
      - 12345:12345
    volumes:
      - ./config/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    networks:
      - monitoring
    restart: unless-stopped

  # logs backend
  loki:
    image: grafana/loki:3.5.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - monitoring
    restart: unless-stopped

  # # tracing backend
  tempo:
    image: grafana/tempo:2.7.2
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo-config.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - "3200:3200" # Tempo UI
    networks:
      - monitoring
    restart: unless-stopped

  memcached:
    image: memcached:1.6.29
    container_name: memcached
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
      - MEMCACHED_THREADS=4 # Number of threads to use
    networks:
      - monitoring

  # metrics backend
  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=native-histograms
      - --enable-feature=exemplar-storage
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  # visualization
  grafana:
    image: grafana/grafana:11.6.1
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-exploretraces-app
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped

  # notify
  # alertmanager:
  #   image: prom/alertmanager:v0.27.0
  #   container_name: alertmanager
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - alertmanager_data:/alertmanager/data
  #     - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   networks:
  #     - monitoring
  #   restart: unless-stopped
